
const PROPERTIES_MAP = Dict{Symbol,Type{<:AbstractParams}}(
  :B0 =>  BMultipoleParams,
  :B1 =>  BMultipoleParams,
  :B2 =>  BMultipoleParams,
  :B3 =>  BMultipoleParams,
  :B4 =>  BMultipoleParams,
  :B5 =>  BMultipoleParams,
  :B6 =>  BMultipoleParams,
  :B7 =>  BMultipoleParams,
  :B8 =>  BMultipoleParams,
  :B9 =>  BMultipoleParams,
  :B10 => BMultipoleParams,
  :B11 => BMultipoleParams,
  :B12 => BMultipoleParams,
  :B13 => BMultipoleParams,
  :B14 => BMultipoleParams,
  :B15 => BMultipoleParams,
  :B16 => BMultipoleParams,
  :B17 => BMultipoleParams,
  :B18 => BMultipoleParams,
  :B19 => BMultipoleParams,
  :B20 => BMultipoleParams,
  :B21 => BMultipoleParams,

  :tilt0 =>  BMultipoleParams,
  :tilt1 =>  BMultipoleParams,
  :tilt2 =>  BMultipoleParams,
  :tilt3 =>  BMultipoleParams,
  :tilt4 =>  BMultipoleParams,
  :tilt5 =>  BMultipoleParams,
  :tilt6 =>  BMultipoleParams,
  :tilt7 =>  BMultipoleParams,
  :tilt8 =>  BMultipoleParams,
  :tilt9 =>  BMultipoleParams,
  :tilt10 => BMultipoleParams,
  :tilt11 => BMultipoleParams,
  :tilt12 => BMultipoleParams,
  :tilt13 => BMultipoleParams,
  :tilt14 => BMultipoleParams,
  :tilt15 => BMultipoleParams,
  :tilt16 => BMultipoleParams,
  :tilt17 => BMultipoleParams,
  :tilt18 => BMultipoleParams,
  :tilt19 => BMultipoleParams,
  :tilt20 => BMultipoleParams,
  :tilt21 => BMultipoleParams,

  :L => UniversalParams,
  :tracking_method => UniversalParams,
  :class => UniversalParams,
  :name => UniversalParams,

  :beamline => BeamlineParams,
  :beamline_index => BeamlineParams,
  :E_ref => BeamlineParams,
  :Brho => BeamlineParams, 
  :s => BeamlineParams,
  :s_downstream => BeamlineParams,

  :B_bend => BendParams,
  :g => BendParams,
  :e1 => BendParams,
  :e2 => BendParams,

  :x_offset => AlignmentParams,
  :y_offset => AlignmentParams,
  :x_rot => AlignmentParams,
  :y_rot => AlignmentParams,
  :tilt => AlignmentParams,
)

const PARAMS_MAP = Dict{Symbol,Type{<:AbstractParams}}(
  :BMultipoleParams => BMultipoleParams,
  :UniversalParams => UniversalParams,
  :BeamlineParams => BeamlineParams,
  :BendParams => BendParams,
)


const VIRTUAL_GETTER_MAP = Dict{Symbol,Function}(
  :K0 =>  get_norm_bm,
  :K1 =>  get_norm_bm,
  :K2 =>  get_norm_bm,
  :K3 =>  get_norm_bm,
  :K4 =>  get_norm_bm,
  :K5 =>  get_norm_bm,
  :K6 =>  get_norm_bm,
  :K7 =>  get_norm_bm,
  :K8 =>  get_norm_bm,
  :K9 =>  get_norm_bm,
  :K10 => get_norm_bm,
  :K11 => get_norm_bm,
  :K12 => get_norm_bm,
  :K13 => get_norm_bm,
  :K14 => get_norm_bm,
  :K15 => get_norm_bm,
  :K16 => get_norm_bm,
  :K17 => get_norm_bm,
  :K18 => get_norm_bm,
  :K19 => get_norm_bm,
  :K20 => get_norm_bm,
  :K21 => get_norm_bm,

  :angle => get_bend_angle,
)

const VIRTUAL_SETTER_MAP = Dict{Symbol,Function}(
  :K0 =>  set_norm_bm!,
  :K1 =>  set_norm_bm!,
  :K2 =>  set_norm_bm!,
  :K3 =>  set_norm_bm!,
  :K4 =>  set_norm_bm!,
  :K5 =>  set_norm_bm!,
  :K6 =>  set_norm_bm!,
  :K7 =>  set_norm_bm!,
  :K8 =>  set_norm_bm!,
  :K9 =>  set_norm_bm!,
  :K10 => set_norm_bm!,
  :K11 => set_norm_bm!,
  :K12 => set_norm_bm!,
  :K13 => set_norm_bm!,
  :K14 => set_norm_bm!,
  :K15 => set_norm_bm!,
  :K16 => set_norm_bm!,
  :K17 => set_norm_bm!,
  :K18 => set_norm_bm!,
  :K19 => set_norm_bm!,
  :K20 => set_norm_bm!,
  :K21 => set_norm_bm!,

  :angle => set_bend_angle!,
)

# Maybe we can do some trickery with FunctionWrappers
# but that will require us to Kow the return type...

# This solution is MUCH faster than AL
# AND no bookkeeper :)
